1. Добавить новые пакеты в bnet_protocol.h

// Сервер запросит сканирование в которой отправит нужную команду
#define SERVER_AH_SCAN_REQUEST 0x6eff
	typedef struct
	{
		t_bnet_header h;
		bn_int		ah_version;
		bn_int		command;
	} PACKED_ATTR( ) t_server_ah_scan_request;

// Клиент вернет нужные данные, хранить будет их в val1 - val4
#define CLIENT_AH_SCAN_RESPONSE 0x6eff
	typedef struct
	{
		t_bnet_header h;
		bn_int		ah_version;
		bn_int		command;
		bn_int		val1;
		bn_int		val2;
		bn_int		val3;
		bn_int		val4;
	} PACKED_ATTR( ) t_client_ah_scan_response;


2. Добавить в packet.h 

			t_server_ah_scan_request	    server_ah_scan_request;
			t_client_ah_scan_response	    client_ah_scan_response;

			
3. Добавить в handle_bnet.cpp

static int _client_ah_scan_response(t_connection * c, t_packet const *const packet);

...
	после 
	{ CLIENT_CHANGEEMAILREQ, _client_changeemailreq },
	добавить
	{ CLIENT_AH_SCAN_RESPONSE, _client_ah_scan_response },
...
	после 
	{ CLIENT_EXTRAWORK, _client_extrawork },
	добавить
	{ CLIENT_AH_SCAN_RESPONSE, _client_ah_scan_response },

static int _client_ah_scan_response( t_connection * c, t_packet const *const packet )
	{
		if ( packet_get_size( packet ) < sizeof( t_client_ah_scan_response ) ) {
			eventlog( eventlog_level_error, __FUNCTION__, "[{}] got bad ANTIHACK packet (expected {} bytes, got {})", conn_get_socket( c ), sizeof( t_client_ah_scan_response ), packet_get_size( packet ) );
			return -1;
		}
		{
			int ahver = bn_int_get( packet->u.client_ah_scan_response.ah_version );
			int command = bn_int_get( packet->u.client_ah_scan_response.command );
			int var1 = bn_int_get( packet->u.client_ah_scan_response.val1 );
			int var2 = bn_int_get( packet->u.client_ah_scan_response.val2 );
			int var3 = bn_int_get( packet->u.client_ah_scan_response.val3 );
			int var4 = bn_int_get( packet->u.client_ah_scan_response.val4 );
			conn_client_ah_scan_response( c, command, ahver, var1, var2, var3, var4 );
		}
		return 0;
	}

	
В функцию 	static int _client_authreq109(t_connection * c, t_packet const *const packet)
		добавить 
		conn_client_request_ah_scan( c, 1 ); 
		перед
		conn_push_outqueue(c, rpacket);
		packet_del_ref(rpacket);
		
		
В функцию _client_logonproofreq добавить после 	hash_set_str(&serverhash, account_get_pass(account));
	if ( conn_get_ah_status( c ) == 1 )
	{
		...
else
	{
		
		eventlog( eventlog_level_info, __FUNCTION__, "[{}] login for \"{}\" refused (no antihack found)", conn_get_socket( c ), username );
		bn_int_set( &rpacket->u.server_logonproofreply.response, SERVER_LOGONPROOFREPLY_RESPONSE_CUSTOM );
		std::string msgtemp;
		if ( conn_get_ah_version( c ) != ANHIHACK_VERSION )
			msgtemp = localize( c, "Please update antihack client!" );
		else
			 msgtemp = localize( c, "Please use antihack client!" );

		if ( conn_get_ah_status( c ) == 2 )
			msgtemp = localize( c, "Please remove hacks and restart!" );
			
		if ( conn_get_ah_status( c ) == 3 )
			msgtemp = localize( c, "Please update launcher!" );
		
		msgtemp += account_get_locktext( c, account, true );
		packet_append_string( rpacket, msgtemp.c_str( ) );
	}
	...
//}
//conn_push_outqueue(c, rpacket);
//packet_del_ref(rpacket);	

4. Добавить в setup_before.h (например)
...
// Изменить версии при обновлении античита или лаунчера что бы защититься от использования старых версий
const int ANHIHACK_VERSION = 0x1be;
const int LAUNCHER_VERSION = 0x1;
...
5. Добавить в connection.h 

extern int conn_client_ah_scan_response( t_connection * c, int command, int ahversion, int var1, int var2, int var3, int var4 );
extern int conn_client_request_ah_scan( t_connection * c, int command );
extern int conn_get_ah_status( t_connection * c );
extern int conn_get_ah_version( t_connection * c );

После:
t_account *		account;
Добавить:
int					ah_status;
int					ah_version;
unsigned int		found_cheat;
unsigned int		found_cheat2dc;

6. Добавить в connection.cpp

extern int conn_client_request_ah_scan( t_connection * c, int command)
{
		t_packet    * rpacket;

		if ( !c )
		{
			eventlog( eventlog_level_error, __FUNCTION__, "got NULL conn" );
			return -1;
		}
		if ( !( rpacket = packet_create( packet_class_bnet ) ) )
			return -1;

		packet_set_size( rpacket, sizeof( t_server_ah_scan_request ) );
		packet_set_type( rpacket, SERVER_AH_SCAN_REQUEST );

		bn_int_set( &rpacket->u.server_ah_scan_request.ah_version, ANHIHACK_VERSION );
		bn_int_set( &rpacket->u.server_ah_scan_request.command, command );

		conn_push_outqueue( c, rpacket );
		packet_del_ref( rpacket );

		return 0;
}

extern int conn_client_ah_scan_response( t_connection * c, int command, int ahversion,int var1,int var2,int var3,int var4 )
{
	eventlog( eventlog_level_error, __FUNCTION__, "[{}] AH PACKET RECIEVED", conn_get_socket( c ));
	if ( command == 1 )
	{
		if ( ahversion == ANHIHACK_VERSION )
		{
			c->protocol.ah_status = 1;
		}
		else
		{
			c->protocol.ah_version = ahversion;
		}

		if ( var1 != 0 )
		{
			c->protocol.ah_status = 2;
		}

	}

	return 0;
}

extern int conn_get_ah_status( t_connection * c )
{
	return c->protocol.ah_status;
}
extern int conn_get_ah_version( t_connection * c )
{
	return c->protocol.ah_version;
}


7. в Gproxy добавить пакет 

SID_AH_PACKET = 0x6e	// 0x6e

и обработчик для него(пример):
...
case SID_AH_PACKET: Handle_AH_PACKET( packet->GetData( ) ); forward = false; break;
...


void CWC3::Handle_AH_PACKET( BYTEARRAY data )
{
	if ( ValidateLength( data ) )
	{
		int offset = 4;
		uint32_t varnull = 0;
		uint32_t AH_VERSION = UTIL_ByteArrayToUInt32( data, false, offset );

		offset += 4;
		uint32_t COMMAND = UTIL_ByteArrayToUInt32( data, false, offset );
		if ( AH_VERSION == ANHIHACK_VERSION )
		{
			if ( COMMAND == 1 )
			{
				if ( ScanResult( ) == AH_VERSION )
				{
					BYTEARRAY packet;
					packet.push_back( 255 );
					packet.push_back( SID_AH_PACKET );
					packet.push_back( 0 );
					packet.push_back( 0 );
					UTIL_AppendByteArray( packet, AH_VERSION, false );
					UTIL_AppendByteArray( packet, COMMAND, false );
					UTIL_AppendByteArray( packet, varnull, false );
					UTIL_AppendByteArray( packet, varnull, false );
					UTIL_AppendByteArray( packet, varnull, false );
					UTIL_AppendByteArray( packet, varnull, false );
					AssignLength( packet );
					m_RemoteSocket->PutBytes( packet );
				}
			}
		}
		else
		{
			MessageBox( 0, "Need update ah", "Warn AH version", 0 );
		}

	}

}


Найти в коде PvPGN все строки "c->protocol.game = NULL;" и поставить перед ними conn_client_request_ah_scan( c, 0x11 ); (отключает режим белого списка)

Добавить в conn_set_game 
в начало :
	bool GameFound = true;

	if ( c->protocol.game ) {
			...
		}
		else GameFound = false;

	в конец:
	if ( !GameFound && c->protocol.game )
	{
		const char * _gamename2 = game_get_name( c->protocol.game );
		if ( _gamename2 && _gamename2[ 0 ] != '\0' )
		{
			if ( strstr( _gamename2, "[WL]" ) == _gamename2 )
				conn_client_request_ah_scan( c, 0x10 );
		}
	}

все ID команд и пакетов можно менять на сервере и в клиенте античита если вдруг будут предприниматься попытки обхода античита.
